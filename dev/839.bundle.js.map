{"version":3,"file":"839.bundle.js","mappings":"6PASA,SAAeA,EAAAA,EAAAA,KAAS,YAAiC,IAA9BC,EAA8B,EAA9BA,SACvBC,QAAQC,IAAI,cAEZ,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAA8CC,EAAAA,EAAAA,YAA9C,eAAOC,EAAP,KAAwBC,EAAxB,KACA,GAAmCC,EAAAA,EAAAA,YAAWC,EAAAA,GAAtCC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,YACbC,GAAqBC,EAAAA,EAAAA,KAAS,kBAAMF,EAAYG,gBAAgB,eAAlC,IAAmDC,MAEjFC,GAAcC,EAAAA,EAAAA,aAAW,mCAAC,WAAOC,GAAP,uFACLR,EAAUS,QAAQD,GADb,OAEX,KADXE,EADsB,QAGxBb,EAAmB,CAAEc,MAAO,CAAEC,KAAM,WAAYC,QAAS,mCACrC,IAAbH,EACPb,EAAmB,CAAEiB,SAAU,CAAEF,KAAM,WAAYC,QAAS,oBACxC,IAAbH,IACPb,EAAmB,CAAC,GACpBJ,EAAS,MARe,2CAAD,sDAU5B,CAACG,IAEEmB,EAA4D,CAC9D,CACIC,GAAI,QACJC,KAAM,QACNC,UAAW,UACXC,MAAO,gBACPP,KAAM,QACNQ,MAAO,CACHC,SAAU,WACVC,QAAS,CACLC,MAAO,wJACPV,QAAS,0BAGjBW,MAAO5B,aAAF,EAAEA,EAAiBe,OAE5B,CACIK,GAAI,WACJC,KAAM,WACNC,UAAW,UACXC,MAAO,WACPP,KAAM,WACNQ,MAAO,CAAEC,SAAU,YACnBG,MAAO5B,aAAF,EAAEA,EAAiBkB,WAIhC,OACI,gBAAC,KAAD,CACIW,SAAS,aACTnC,SAAUA,GAAYgB,EACtBoB,WAAYX,EACZY,iBAAiB,WACjBC,aAAc1B,GAGzB,G","sources":["webpack://ai-mirror-react-poc/./src/forms/login-form/index.tsx"],"sourcesContent":["import { FormComponent } from \"components\";\nimport RootContext from \"contexts/root-context\";\nimport React, { useCallback, useContext, useState } from \"react\"\nimport { useNavigate } from \"react-router\";\nimport { FormInputType } from \"types/form-types\";\nimport { LoginFormErrorsType, LoginFormType, LoginFormValuesTypes } from \"types/user-store\";\nimport { observer } from \"mobx-react-lite\";\nimport { computed } from \"mobx\";\n\nexport default observer(({ onSubmit }: LoginFormType) => {\n    console.log(\"Login Form\");\n\n    const navigate = useNavigate();\n    const [loginFormErrors, setLoginFormErrors] = useState<LoginFormErrorsType>();\n    const { userStore, loaderStore } = useContext(RootContext);\n    const loginRequestStatus = computed(() => loaderStore.getStatusByName(\"LoginRequest\")).get();\n\n    const handleLogin = useCallback(async (data: LoginFormValuesTypes) => {\n        const response = await userStore.onLogin(data);\n        if (response === 3) {\n            setLoginFormErrors({ email: { type: \"validate\", message: \"Email address does not exists\" } });\n        } else if (response === 2) {\n            setLoginFormErrors({ password: { type: \"validate\", message: \"Wrong password\" } });\n        } else if (response === 1) {\n            setLoginFormErrors({});\n            navigate(\"/\");\n        }\n    }, [loginFormErrors]);\n\n    const LoginFormFields: FormInputType<Record<string, unknown>>[] = [\n        {\n            id: \"email\",\n            name: \"email\",\n            className: \"textbox\",\n            label: \"Email address\",\n            type: \"email\",\n            rules: {\n                required: \"Required\",\n                pattern: {\n                    value: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n                    message: \"Invalid email address\"\n                }\n            },\n            error: loginFormErrors?.email\n        },\n        {\n            id: \"password\",\n            name: \"password\",\n            className: \"textbox\",\n            label: \"Password\",\n            type: \"password\",\n            rules: { required: \"Required\" },\n            error: loginFormErrors?.password\n        }\n    ];\n\n    return (\n        <FormComponent\n            formName=\"login-form\"\n            onSubmit={onSubmit || handleLogin}\n            formFields={LoginFormFields}\n            submitButtonName=\"Login Me\"\n            isSubmitting={loginRequestStatus}\n        />\n    );\n});"],"names":["observer","onSubmit","console","log","navigate","useNavigate","useState","loginFormErrors","setLoginFormErrors","useContext","RootContext","userStore","loaderStore","loginRequestStatus","computed","getStatusByName","get","handleLogin","useCallback","data","onLogin","response","email","type","message","password","LoginFormFields","id","name","className","label","rules","required","pattern","value","error","formName","formFields","submitButtonName","isSubmitting"],"sourceRoot":""}